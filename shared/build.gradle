apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion rootProject.compileSdkVersion
    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'

        buildConfigField "String", "CONFERENCE_TIMEZONE", "\"${conference_timezone}\""
        buildConfigField "String", "CONFERENCE_DAY1_START", "\"${conference_day1_start}\""
        buildConfigField "String", "CONFERENCE_DAY1_END", "\"${conference_day1_end}\""
        buildConfigField "String", "CONFERENCE_DAY2_START", "\"${conference_day2_start}\""
        buildConfigField "String", "CONFERENCE_DAY2_END", "\"${conference_day2_end}\""
        buildConfigField "String", "CONFERENCE_DAY3_START", "\"${conference_day3_start}\""
        buildConfigField "String", "CONFERENCE_DAY3_END", "\"${conference_day3_end}\""

        buildConfigField "String", "CONFERENCE_DAY1_AFTERHOURS_START", "\"${conference_day1_afterhours_start}\""
        buildConfigField "String", "CONFERENCE_DAY2_CONCERT_START", "\"${conference_day2_concert_start}\""

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        debug.java.srcDir 'src/debugRelease/java'
        release.java.srcDir 'src/debugRelease/java'
    }

}

dependencies {
    api project(":model")
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation project(':androidTest-shared')

    // Architecture Components
    implementation "androidx.lifecycle:lifecycle-extensions:$rootProject.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata:$rootProject.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel:$rootProject.lifecycleVersion"
    testImplementation "androidx.arch.core:core-testing:$rootProject.archTestingVersion"

    // Utils
    api "com.jakewharton.timber:timber:$rootProject.timberVersion"
    implementation "androidx.core:core-ktx:$rootProject.ktxVersion"

    // Dagger
    implementation "com.google.dagger:dagger-android:$rootProject.dagger"
    implementation "com.google.dagger:dagger-android-support:$rootProject.dagger"
    kapt "com.google.dagger:dagger-compiler:$rootProject.dagger"
    kapt "com.google.dagger:dagger-android-processor:$rootProject.dagger"

    // Firebase
    api "com.google.firebase:firebase-auth:$rootProject.firebaseAuthVersion"
    api "com.google.firebase:firebase-core:$rootProject.firebaseCoreVersion"
    api "com.google.firebase:firebase-firestore:$rootProject.firebaseFirestoreVersion"

    // ThreeTenBP for the shared module only. Date and time API for Java.
    testImplementation "org.threeten:threetenbp:$rootProject.threetenbpVersion"

    // Instrumentation tests
    androidTestImplementation "androidx.test:runner:$rootProject.runnerVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.espressoVersion"

    // Local unit tests
    testImplementation "junit:junit:$rootProject.junitVersion"
    testImplementation "org.mockito:mockito-core:$rootProject.mockitoVersion"
    testImplementation "com.nhaarman:mockito-kotlin:$rootProject.mockitoKotlinVersion"
}
